
120B_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00000aea  00000b7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800188  00800188  00000c06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000c78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ba5  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6a  00000000  00000000  0000298d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107a  00000000  00000000  000034f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00004574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f1  00000000  00000000  00004894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013b5  00000000  00000000  00005185  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000653a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	10 c1       	rjmp	.+544    	; 0x256 <__vector_13>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	a4 01       	movw	r20, r8
  8e:	a7 01       	movw	r20, r14
  90:	ae 01       	movw	r20, r28
  92:	b2 01       	movw	r22, r4
  94:	b6 01       	movw	r22, r12
  96:	dc 01       	movw	r26, r24
  98:	df 01       	movw	r26, r30

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	ea ee       	ldi	r30, 0xEA	; 234
  ae:	fa e0       	ldi	r31, 0x0A	; 10
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	0b bf       	out	0x3b, r16	; 59
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
  b6:	07 90       	elpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	a8 38       	cpi	r26, 0x88	; 136
  bc:	b1 07       	cpc	r27, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a8 e8       	ldi	r26, 0x88	; 136
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a8 3a       	cpi	r26, 0xA8	; 168
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	18 d4       	rcall	.+2096   	; 0x902 <main>
  d2:	09 c5       	rjmp	.+2578   	; 0xae6 <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <delay_ms>:
		LCD_Char(fxxd);	
	}
}

void initialdisplay(){
	LCD_ClearScreen();
  d6:	18 16       	cp	r1, r24
  d8:	19 06       	cpc	r1, r25
  da:	5c f0       	brlt	.+22     	; 0xf2 <delay_ms+0x1c>
  dc:	08 95       	ret
  de:	00 00       	nop
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	31 09       	sbc	r19, r1
  e4:	e1 f7       	brne	.-8      	; 0xde <delay_ms+0x8>
  e6:	4f 5f       	subi	r20, 0xFF	; 255
  e8:	5f 4f       	sbci	r21, 0xFF	; 255
  ea:	84 17       	cp	r24, r20
  ec:	95 07       	cpc	r25, r21
  ee:	19 f4       	brne	.+6      	; 0xf6 <delay_ms+0x20>
  f0:	08 95       	ret
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	27 e0       	ldi	r18, 0x07	; 7
  f8:	33 e0       	ldi	r19, 0x03	; 3
  fa:	f1 cf       	rjmp	.-30     	; 0xde <delay_ms+0x8>

000000fc <LCD_WriteCommand>:
  fc:	5e 98       	cbi	0x0b, 6	; 11
  fe:	88 b9       	out	0x08, r24	; 8
 100:	5f 9a       	sbi	0x0b, 7	; 11
 102:	00 00       	nop
 104:	5f 98       	cbi	0x0b, 7	; 11
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	e5 cf       	rjmp	.-54     	; 0xd6 <delay_ms>
 10c:	08 95       	ret

0000010e <LCD_ClearScreen>:
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	f5 cf       	rjmp	.-22     	; 0xfc <LCD_WriteCommand>
 112:	08 95       	ret

00000114 <LCD_Cursor>:
 114:	81 31       	cpi	r24, 0x11	; 17
 116:	18 f4       	brcc	.+6      	; 0x11e <LCD_Cursor+0xa>
 118:	81 58       	subi	r24, 0x81	; 129
 11a:	f0 cf       	rjmp	.-32     	; 0xfc <LCD_WriteCommand>
 11c:	08 95       	ret
 11e:	81 55       	subi	r24, 0x51	; 81
 120:	ed cf       	rjmp	.-38     	; 0xfc <LCD_WriteCommand>
 122:	08 95       	ret

00000124 <LCD_init>:
 124:	84 e6       	ldi	r24, 0x64	; 100
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	d6 df       	rcall	.-84     	; 0xd6 <delay_ms>
 12a:	88 e3       	ldi	r24, 0x38	; 56
 12c:	e7 df       	rcall	.-50     	; 0xfc <LCD_WriteCommand>
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	e5 df       	rcall	.-54     	; 0xfc <LCD_WriteCommand>
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	e3 df       	rcall	.-58     	; 0xfc <LCD_WriteCommand>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	e1 df       	rcall	.-62     	; 0xfc <LCD_WriteCommand>
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	cb cf       	rjmp	.-106    	; 0xd6 <delay_ms>
 140:	08 95       	ret

00000142 <LCD_WriteData>:
 142:	5e 9a       	sbi	0x0b, 6	; 11
 144:	88 b9       	out	0x08, r24	; 8
 146:	5f 9a       	sbi	0x0b, 7	; 11
 148:	00 00       	nop
 14a:	5f 98       	cbi	0x0b, 7	; 11
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	c2 cf       	rjmp	.-124    	; 0xd6 <delay_ms>
 152:	08 95       	ret

00000154 <LCD_DisplayString>:
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	18 2f       	mov	r17, r24
 15e:	eb 01       	movw	r28, r22
 160:	d6 df       	rcall	.-84     	; 0x10e <LCD_ClearScreen>
 162:	88 81       	ld	r24, Y
 164:	88 23       	and	r24, r24
 166:	51 f0       	breq	.+20     	; 0x17c <LCD_DisplayString+0x28>
 168:	01 e0       	ldi	r16, 0x01	; 1
 16a:	01 0f       	add	r16, r17
 16c:	81 2f       	mov	r24, r17
 16e:	d2 df       	rcall	.-92     	; 0x114 <LCD_Cursor>
 170:	89 91       	ld	r24, Y+
 172:	e7 df       	rcall	.-50     	; 0x142 <LCD_WriteData>
 174:	10 2f       	mov	r17, r16
 176:	88 81       	ld	r24, Y
 178:	81 11       	cpse	r24, r1
 17a:	f6 cf       	rjmp	.-20     	; 0x168 <LCD_DisplayString+0x14>
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <LCD_Command>:
 186:	88 b9       	out	0x08, r24	; 8
 188:	5e 98       	cbi	0x0b, 6	; 11
 18a:	5d 98       	cbi	0x0b, 5	; 11
 18c:	5f 9a       	sbi	0x0b, 7	; 11
 18e:	00 00       	nop
 190:	5f 98       	cbi	0x0b, 7	; 11
 192:	83 ef       	ldi	r24, 0xF3	; 243
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Command+0x10>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Command+0x16>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <LCD_Char>:
 1a0:	88 b9       	out	0x08, r24	; 8
 1a2:	5e 9a       	sbi	0x0b, 6	; 11
 1a4:	5d 98       	cbi	0x0b, 5	; 11
 1a6:	5f 9a       	sbi	0x0b, 7	; 11
 1a8:	00 00       	nop
 1aa:	5f 98       	cbi	0x0b, 7	; 11
 1ac:	83 ef       	ldi	r24, 0xF3	; 243
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_Char+0x10>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_Char+0x16>
 1b6:	00 00       	nop
 1b8:	08 95       	ret

000001ba <LCD_Custom_Char>:
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	70 f4       	brcc	.+28     	; 0x1e2 <LCD_Custom_Char+0x28>
 1c6:	8b 01       	movw	r16, r22
 1c8:	88 0f       	add	r24, r24
 1ca:	88 0f       	add	r24, r24
 1cc:	88 0f       	add	r24, r24
 1ce:	80 5c       	subi	r24, 0xC0	; 192
 1d0:	da df       	rcall	.-76     	; 0x186 <LCD_Command>
 1d2:	e8 01       	movw	r28, r16
 1d4:	08 5f       	subi	r16, 0xF8	; 248
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255
 1d8:	89 91       	ld	r24, Y+
 1da:	e2 df       	rcall	.-60     	; 0x1a0 <LCD_Char>
 1dc:	c0 17       	cp	r28, r16
 1de:	d1 07       	cpc	r29, r17
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <LCD_Custom_Char+0x1e>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <TimerSet>:
 1ec:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <_avr_timer_M>
 1f0:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <_avr_timer_M+0x1>
 1f4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_M+0x2>
 1f8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_M+0x3>
 1fc:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <_avr_timer_cntcurr>
 200:	70 93 a4 01 	sts	0x01A4, r23	; 0x8001a4 <_avr_timer_cntcurr+0x1>
 204:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <_avr_timer_cntcurr+0x2>
 208:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <_avr_timer_cntcurr+0x3>
 20c:	08 95       	ret

0000020e <TimerOn>:
 20e:	8b e0       	ldi	r24, 0x0B	; 11
 210:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 214:	8d e7       	ldi	r24, 0x7D	; 125
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 21c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 226:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 22a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 22e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_avr_timer_M>
 232:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_avr_timer_M+0x1>
 236:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_avr_timer_M+0x2>
 23a:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_avr_timer_M+0x3>
 23e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_avr_timer_cntcurr>
 242:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_avr_timer_cntcurr+0x1>
 246:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <_avr_timer_cntcurr+0x2>
 24a:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <_avr_timer_cntcurr+0x3>
 24e:	8f b7       	in	r24, 0x3f	; 63
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8f bf       	out	0x3f, r24	; 63
 254:	08 95       	ret

00000256 <__vector_13>:
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <_avr_timer_cntcurr>
 26c:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <_avr_timer_cntcurr+0x1>
 270:	a0 91 a5 01 	lds	r26, 0x01A5	; 0x8001a5 <_avr_timer_cntcurr+0x2>
 274:	b0 91 a6 01 	lds	r27, 0x01A6	; 0x8001a6 <_avr_timer_cntcurr+0x3>
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	a1 09       	sbc	r26, r1
 27c:	b1 09       	sbc	r27, r1
 27e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_avr_timer_cntcurr>
 282:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_avr_timer_cntcurr+0x1>
 286:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <_avr_timer_cntcurr+0x2>
 28a:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <_avr_timer_cntcurr+0x3>
 28e:	89 2b       	or	r24, r25
 290:	8a 2b       	or	r24, r26
 292:	8b 2b       	or	r24, r27
 294:	99 f4       	brne	.+38     	; 0x2bc <__vector_13+0x66>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <TimerFlag>
 29c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_avr_timer_M>
 2a0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_avr_timer_M+0x1>
 2a4:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_avr_timer_M+0x2>
 2a8:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_avr_timer_M+0x3>
 2ac:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_avr_timer_cntcurr>
 2b0:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_avr_timer_cntcurr+0x1>
 2b4:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <_avr_timer_cntcurr+0x2>
 2b8:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <_avr_timer_cntcurr+0x3>
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <HC595Init>:
 2ce:	84 b1       	in	r24, 0x04	; 4
 2d0:	87 60       	ori	r24, 0x07	; 7
 2d2:	84 b9       	out	0x04, r24	; 4
 2d4:	08 95       	ret

000002d6 <HC595Pulse>:
 2d6:	29 9a       	sbi	0x05, 1	; 5
 2d8:	29 98       	cbi	0x05, 1	; 5
 2da:	08 95       	ret

000002dc <HC595Latch>:
 2dc:	2a 9a       	sbi	0x05, 2	; 5
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	98 2f       	mov	r25, r24
 2e2:	9a 95       	dec	r25
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <HC595Latch+0x6>
 2e6:	2a 98       	cbi	0x05, 2	; 5
 2e8:	8a 95       	dec	r24
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <HC595Latch+0xc>
 2ec:	08 95       	ret

000002ee <HC595Write>:
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	d8 2f       	mov	r29, r24
 2f4:	c8 e0       	ldi	r28, 0x08	; 8
 2f6:	dd 23       	and	r29, r29
 2f8:	14 f4       	brge	.+4      	; 0x2fe <HC595Write+0x10>
 2fa:	28 9a       	sbi	0x05, 0	; 5
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <HC595Write+0x12>
 2fe:	28 98       	cbi	0x05, 0	; 5
 300:	ea df       	rcall	.-44     	; 0x2d6 <HC595Pulse>
 302:	dd 0f       	add	r29, r29
 304:	c1 50       	subi	r28, 0x01	; 1
 306:	b9 f7       	brne	.-18     	; 0x2f6 <HC595Write+0x8>
 308:	e9 df       	rcall	.-46     	; 0x2dc <HC595Latch>
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <Game>:
 310:	9f 92       	push	r9
 312:	af 92       	push	r10
 314:	bf 92       	push	r11
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	a0 97       	sbiw	r28, 0x20	; 32
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	20 b1       	in	r18, 0x00	; 0
 338:	87 30       	cpi	r24, 0x07	; 7
 33a:	91 05       	cpc	r25, r1
 33c:	08 f0       	brcs	.+2      	; 0x340 <Game+0x30>
 33e:	42 c0       	rjmp	.+132    	; 0x3c4 <Game+0xb4>
 340:	fc 01       	movw	r30, r24
 342:	ea 5b       	subi	r30, 0xBA	; 186
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	a1 c3       	rjmp	.+1858   	; 0xa8a <__tablejump2__>
 348:	02 9b       	sbis	0x00, 2	; 0
 34a:	70 c0       	rjmp	.+224    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 34c:	4c c0       	rjmp	.+152    	; 0x3e6 <Game+0xd6>
 34e:	20 ff       	sbrs	r18, 0
 350:	f7 c1       	rjmp	.+1006   	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 352:	21 ff       	sbrs	r18, 1
 354:	f8 c1       	rjmp	.+1008   	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 356:	23 ff       	sbrs	r18, 3
 358:	f9 c1       	rjmp	.+1010   	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 35a:	68 c0       	rjmp	.+208    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 362:	64 c0       	rjmp	.+200    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 364:	81 e1       	ldi	r24, 0x11	; 17
 366:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 36a:	60 c0       	rjmp	.+192    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 36c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <lol>
 370:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <point>
 374:	81 e1       	ldi	r24, 0x11	; 17
 376:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 37a:	e4 e0       	ldi	r30, 0x04	; 4
 37c:	f1 e0       	ldi	r31, 0x01	; 1
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	80 83       	st	Z, r24
 382:	89 e0       	ldi	r24, 0x09	; 9
 384:	81 83       	std	Z+1, r24	; 0x01
 386:	8c e1       	ldi	r24, 0x1C	; 28
 388:	82 83       	std	Z+2, r24	; 0x02
 38a:	e1 e0       	ldi	r30, 0x01	; 1
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	87 e0       	ldi	r24, 0x07	; 7
 390:	80 83       	st	Z, r24
 392:	84 e1       	ldi	r24, 0x14	; 20
 394:	81 83       	std	Z+1, r24	; 0x01
 396:	8a e1       	ldi	r24, 0x1A	; 26
 398:	82 83       	std	Z+2, r24	; 0x02
 39a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <__data_end>
 39e:	8e e1       	ldi	r24, 0x1E	; 30
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	a0 e0       	ldi	r26, 0x00	; 0
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <task2+0x1>
 3aa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <task2+0x2>
 3ae:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <task2+0x3>
 3b2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <task2+0x4>
 3b6:	1b c0       	rjmp	.+54     	; 0x3ee <Game+0xde>
 3b8:	03 9b       	sbis	0x00, 3	; 0
 3ba:	cb c1       	rjmp	.+918    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 3bc:	ef c0       	rjmp	.+478    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 3be:	03 9b       	sbis	0x00, 3	; 0
 3c0:	cb c1       	rjmp	.+918    	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
 3c2:	15 c1       	rjmp	.+554    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	91 05       	cpc	r25, r1
 3c8:	89 f1       	breq	.+98     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3ca:	24 f4       	brge	.+8      	; 0x3d4 <Game+0xc4>
 3cc:	00 97       	sbiw	r24, 0x00	; 0
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <Game+0xc2>
 3d0:	c5 c1       	rjmp	.+906    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <Game+0xd6>
 3d4:	85 30       	cpi	r24, 0x05	; 5
 3d6:	91 05       	cpc	r25, r1
 3d8:	09 f4       	brne	.+2      	; 0x3dc <Game+0xcc>
 3da:	e0 c0       	rjmp	.+448    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 3dc:	86 30       	cpi	r24, 0x06	; 6
 3de:	91 05       	cpc	r25, r1
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <Game+0xd4>
 3e2:	05 c1       	rjmp	.+522    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 3e4:	bb c1       	rjmp	.+886    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 3e6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <lol>
 3ea:	81 11       	cpse	r24, r1
 3ec:	9d c1       	rjmp	.+826    	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 3ee:	85 e1       	ldi	r24, 0x15	; 21
 3f0:	ef e0       	ldi	r30, 0x0F	; 15
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	de 01       	movw	r26, r28
 3f6:	11 96       	adiw	r26, 0x01	; 1
 3f8:	01 90       	ld	r0, Z+
 3fa:	0d 92       	st	X+, r0
 3fc:	8a 95       	dec	r24
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <Game+0xe8>
 400:	fe 01       	movw	r30, r28
 402:	76 96       	adiw	r30, 0x16	; 22
 404:	8b e0       	ldi	r24, 0x0B	; 11
 406:	df 01       	movw	r26, r30
 408:	1d 92       	st	X+, r1
 40a:	8a 95       	dec	r24
 40c:	e9 f7       	brne	.-6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 40e:	be 01       	movw	r22, r28
 410:	6f 5f       	subi	r22, 0xFF	; 255
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	9e de       	rcall	.-708    	; 0x154 <LCD_DisplayString>
 418:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <point>
 41c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <lol>
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <lol>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	98 c1       	rjmp	.+816    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 42c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <lol>
 430:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
 434:	81 11       	cpse	r24, r1
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	5a df       	rcall	.-332    	; 0x2ee <HC595Write>
 43a:	13 c0       	rjmp	.+38     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	19 f4       	brne	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	55 df       	rcall	.-342    	; 0x2ee <HC595Write>
 444:	0e c0       	rjmp	.+28     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	19 f4       	brne	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44a:	8f e0       	ldi	r24, 0x0F	; 15
 44c:	50 df       	rcall	.-352    	; 0x2ee <HC595Write>
 44e:	09 c0       	rjmp	.+18     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 450:	83 30       	cpi	r24, 0x03	; 3
 452:	19 f4       	brne	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 454:	8f e3       	ldi	r24, 0x3F	; 63
 456:	4b df       	rcall	.-362    	; 0x2ee <HC595Write>
 458:	04 c0       	rjmp	.+8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	11 f4       	brne	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	46 df       	rcall	.-372    	; 0x2ee <HC595Write>
 462:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 466:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <point>
 46a:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <__data_end>
 46e:	c0 90 8e 01 	lds	r12, 0x018E	; 0x80018e <task2+0x1>
 472:	d0 90 8f 01 	lds	r13, 0x018F	; 0x80018f <task2+0x2>
 476:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <task2+0x3>
 47a:	f0 90 91 01 	lds	r15, 0x0191	; 0x800191 <task2+0x4>
 47e:	e4 e0       	ldi	r30, 0x04	; 4
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	a1 e0       	ldi	r26, 0x01	; 1
 484:	b1 e0       	ldi	r27, 0x01	; 1
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	0d e0       	ldi	r16, 0x0D	; 13
 490:	0f 2e       	mov	r0, r31
 492:	fa e0       	ldi	r31, 0x0A	; 10
 494:	9f 2e       	mov	r9, r31
 496:	f0 2d       	mov	r31, r0
 498:	0f 2e       	mov	r0, r31
 49a:	f7 e0       	ldi	r31, 0x07	; 7
 49c:	af 2e       	mov	r10, r31
 49e:	f0 2d       	mov	r31, r0
 4a0:	68 94       	set
 4a2:	bb 24       	eor	r11, r11
 4a4:	b2 f8       	bld	r11, 2
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	c9 01       	movw	r24, r18
 4aa:	20 81       	ld	r18, Z
 4ac:	24 13       	cpse	r18, r20
 4ae:	42 c0       	rjmp	.+132    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 4b0:	10 82       	st	Z, r1
 4b2:	53 30       	cpi	r21, 0x03	; 3
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b6:	1f 5f       	subi	r17, 0xFF	; 255
 4b8:	25 e0       	ldi	r18, 0x05	; 5
 4ba:	c2 1a       	sub	r12, r18
 4bc:	d1 08       	sbc	r13, r1
 4be:	e1 08       	sbc	r14, r1
 4c0:	f1 08       	sbc	r15, r1
 4c2:	5b 2d       	mov	r21, r11
 4c4:	4d c0       	rjmp	.+154    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4c6:	56 30       	cpi	r21, 0x06	; 6
 4c8:	41 f4       	brne	.+16     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ca:	1f 5f       	subi	r17, 0xFF	; 255
 4cc:	25 e0       	ldi	r18, 0x05	; 5
 4ce:	c2 1a       	sub	r12, r18
 4d0:	d1 08       	sbc	r13, r1
 4d2:	e1 08       	sbc	r14, r1
 4d4:	f1 08       	sbc	r15, r1
 4d6:	5a 2d       	mov	r21, r10
 4d8:	43 c0       	rjmp	.+134    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4da:	59 30       	cpi	r21, 0x09	; 9
 4dc:	41 f4       	brne	.+16     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4de:	1f 5f       	subi	r17, 0xFF	; 255
 4e0:	25 e0       	ldi	r18, 0x05	; 5
 4e2:	c2 1a       	sub	r12, r18
 4e4:	d1 08       	sbc	r13, r1
 4e6:	e1 08       	sbc	r14, r1
 4e8:	f1 08       	sbc	r15, r1
 4ea:	59 2d       	mov	r21, r9
 4ec:	39 c0       	rjmp	.+114    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4ee:	5c 30       	cpi	r21, 0x0C	; 12
 4f0:	41 f4       	brne	.+16     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4f2:	1f 5f       	subi	r17, 0xFF	; 255
 4f4:	25 e0       	ldi	r18, 0x05	; 5
 4f6:	c2 1a       	sub	r12, r18
 4f8:	d1 08       	sbc	r13, r1
 4fa:	e1 08       	sbc	r14, r1
 4fc:	f1 08       	sbc	r15, r1
 4fe:	50 2f       	mov	r21, r16
 500:	2f c0       	rjmp	.+94     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 502:	50 93 8a 01 	sts	0x018A, r21	; 0x80018a <point>
 506:	10 93 88 01 	sts	0x0188, r17	; 0x800188 <__data_end>
 50a:	c0 92 8e 01 	sts	0x018E, r12	; 0x80018e <task2+0x1>
 50e:	d0 92 8f 01 	sts	0x018F, r13	; 0x80018f <task2+0x2>
 512:	e0 92 90 01 	sts	0x0190, r14	; 0x800190 <task2+0x3>
 516:	f0 92 91 01 	sts	0x0191, r15	; 0x800191 <task2+0x4>
 51a:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <i>
 51e:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <i+0x1>
 522:	5f 30       	cpi	r21, 0x0F	; 15
 524:	09 f4       	brne	.+2      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 526:	03 c1       	rjmp	.+518    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 528:	5f 5f       	subi	r21, 0xFF	; 255
 52a:	50 93 8a 01 	sts	0x018A, r21	; 0x80018a <point>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	14 c1       	rjmp	.+552    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 534:	2c 91       	ld	r18, X
 536:	42 13       	cpse	r20, r18
 538:	13 c0       	rjmp	.+38     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 53a:	50 93 8a 01 	sts	0x018A, r21	; 0x80018a <point>
 53e:	10 93 88 01 	sts	0x0188, r17	; 0x800188 <__data_end>
 542:	c0 92 8e 01 	sts	0x018E, r12	; 0x80018e <task2+0x1>
 546:	d0 92 8f 01 	sts	0x018F, r13	; 0x80018f <task2+0x2>
 54a:	e0 92 90 01 	sts	0x0190, r14	; 0x800190 <task2+0x3>
 54e:	f0 92 91 01 	sts	0x0191, r15	; 0x800191 <task2+0x4>
 552:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <i>
 556:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <i+0x1>
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	fe c0       	rjmp	.+508    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 560:	9c 01       	movw	r18, r24
 562:	2f 5f       	subi	r18, 0xFF	; 255
 564:	3f 4f       	sbci	r19, 0xFF	; 255
 566:	31 96       	adiw	r30, 0x01	; 1
 568:	11 96       	adiw	r26, 0x01	; 1
 56a:	78 2f       	mov	r23, r24
 56c:	69 2f       	mov	r22, r25
 56e:	24 30       	cpi	r18, 0x04	; 4
 570:	31 05       	cpc	r19, r1
 572:	09 f0       	breq	.+2      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 574:	99 cf       	rjmp	.-206    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 576:	50 93 8a 01 	sts	0x018A, r21	; 0x80018a <point>
 57a:	10 93 88 01 	sts	0x0188, r17	; 0x800188 <__data_end>
 57e:	c0 92 8e 01 	sts	0x018E, r12	; 0x80018e <task2+0x1>
 582:	d0 92 8f 01 	sts	0x018F, r13	; 0x80018f <task2+0x2>
 586:	e0 92 90 01 	sts	0x0190, r14	; 0x800190 <task2+0x3>
 58a:	f0 92 91 01 	sts	0x0191, r15	; 0x800191 <task2+0x4>
 58e:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <i+0x1>
 592:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <i>
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	e0 c0       	rjmp	.+448    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 59c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <lol>
 5a0:	81 11       	cpse	r24, r1
 5a2:	c8 c0       	rjmp	.+400    	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	8a e0       	ldi	r24, 0x0A	; 10
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	8f d2       	rcall	.+1310   	; 0xaca <eeprom_write_byte>
 5ac:	65 e0       	ldi	r22, 0x05	; 5
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	8b d2       	rcall	.+1302   	; 0xaca <eeprom_write_byte>
 5b4:	8d e1       	ldi	r24, 0x1D	; 29
 5b6:	ef e2       	ldi	r30, 0x2F	; 47
 5b8:	f1 e0       	ldi	r31, 0x01	; 1
 5ba:	de 01       	movw	r26, r28
 5bc:	11 96       	adiw	r26, 0x01	; 1
 5be:	01 90       	ld	r0, Z+
 5c0:	0d 92       	st	X+, r0
 5c2:	8a 95       	dec	r24
 5c4:	e1 f7       	brne	.-8      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5c6:	fe 01       	movw	r30, r28
 5c8:	7e 96       	adiw	r30, 0x1e	; 30
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	df 01       	movw	r26, r30
 5ce:	1d 92       	st	X+, r1
 5d0:	8a 95       	dec	r24
 5d2:	e9 f7       	brne	.-6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5d4:	be 01       	movw	r22, r28
 5d6:	6f 5f       	subi	r22, 0xFF	; 255
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	bb dd       	rcall	.-1162   	; 0x154 <LCD_DisplayString>
 5de:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <lol>
 5e2:	8f 5f       	subi	r24, 0xFF	; 255
 5e4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <lol>
 5e8:	85 e0       	ldi	r24, 0x05	; 5
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	b7 c0       	rjmp	.+366    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 5ee:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <lol>
 5f2:	81 11       	cpse	r24, r1
 5f4:	a2 c0       	rjmp	.+324    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	5f d2       	rcall	.+1214   	; 0xaba <eeprom_read_byte>
 5fc:	18 2f       	mov	r17, r24
 5fe:	8a e0       	ldi	r24, 0x0A	; 10
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	5b d2       	rcall	.+1206   	; 0xaba <eeprom_read_byte>
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	79 01       	movw	r14, r18
 60a:	ee 0c       	add	r14, r14
 60c:	ff 1c       	adc	r15, r15
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	22 0f       	add	r18, r18
 618:	33 1f       	adc	r19, r19
 61a:	e2 0e       	add	r14, r18
 61c:	f3 1e       	adc	r15, r19
 61e:	e1 0e       	add	r14, r17
 620:	f1 1c       	adc	r15, r1
 622:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <point>
 626:	28 2f       	mov	r18, r24
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	e2 16       	cp	r14, r18
 62c:	f3 06       	cpc	r15, r19
 62e:	f0 f4       	brcc	.+60     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 630:	1d ec       	ldi	r17, 0xCD	; 205
 632:	81 9f       	mul	r24, r17
 634:	61 2d       	mov	r22, r1
 636:	11 24       	eor	r1, r1
 638:	66 95       	lsr	r22
 63a:	66 95       	lsr	r22
 63c:	66 95       	lsr	r22
 63e:	8a e0       	ldi	r24, 0x0A	; 10
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	43 d2       	rcall	.+1158   	; 0xaca <eeprom_write_byte>
 644:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <point>
 648:	61 9f       	mul	r22, r17
 64a:	11 2d       	mov	r17, r1
 64c:	11 24       	eor	r1, r1
 64e:	16 95       	lsr	r17
 650:	16 95       	lsr	r17
 652:	16 95       	lsr	r17
 654:	11 0f       	add	r17, r17
 656:	81 2f       	mov	r24, r17
 658:	88 0f       	add	r24, r24
 65a:	88 0f       	add	r24, r24
 65c:	18 0f       	add	r17, r24
 65e:	61 1b       	sub	r22, r17
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	32 d2       	rcall	.+1124   	; 0xaca <eeprom_write_byte>
 666:	e0 90 8a 01 	lds	r14, 0x018A	; 0x80018a <point>
 66a:	f1 2c       	mov	r15, r1
 66c:	8d e1       	ldi	r24, 0x1D	; 29
 66e:	ef e4       	ldi	r30, 0x4F	; 79
 670:	f1 e0       	ldi	r31, 0x01	; 1
 672:	de 01       	movw	r26, r28
 674:	11 96       	adiw	r26, 0x01	; 1
 676:	01 90       	ld	r0, Z+
 678:	0d 92       	st	X+, r0
 67a:	8a 95       	dec	r24
 67c:	e1 f7       	brne	.-8      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 67e:	fe 01       	movw	r30, r28
 680:	7e 96       	adiw	r30, 0x1e	; 30
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	df 01       	movw	r26, r30
 686:	1d 92       	st	X+, r1
 688:	8a 95       	dec	r24
 68a:	e9 f7       	brne	.-6      	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 68c:	be 01       	movw	r22, r28
 68e:	6f 5f       	subi	r22, 0xFF	; 255
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	5f dd       	rcall	.-1346   	; 0x154 <LCD_DisplayString>
 696:	8e e0       	ldi	r24, 0x0E	; 14
 698:	3d dd       	rcall	.-1414   	; 0x114 <LCD_Cursor>
 69a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <point>
 69e:	1d ec       	ldi	r17, 0xCD	; 205
 6a0:	81 9f       	mul	r24, r17
 6a2:	81 2d       	mov	r24, r1
 6a4:	11 24       	eor	r1, r1
 6a6:	86 95       	lsr	r24
 6a8:	86 95       	lsr	r24
 6aa:	86 95       	lsr	r24
 6ac:	80 5d       	subi	r24, 0xD0	; 208
 6ae:	49 dd       	rcall	.-1390   	; 0x142 <LCD_WriteData>
 6b0:	8f e0       	ldi	r24, 0x0F	; 15
 6b2:	30 dd       	rcall	.-1440   	; 0x114 <LCD_Cursor>
 6b4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <point>
 6b8:	81 9f       	mul	r24, r17
 6ba:	11 2d       	mov	r17, r1
 6bc:	11 24       	eor	r1, r1
 6be:	16 95       	lsr	r17
 6c0:	16 95       	lsr	r17
 6c2:	16 95       	lsr	r17
 6c4:	11 0f       	add	r17, r17
 6c6:	91 2f       	mov	r25, r17
 6c8:	99 0f       	add	r25, r25
 6ca:	99 0f       	add	r25, r25
 6cc:	19 0f       	add	r17, r25
 6ce:	81 1b       	sub	r24, r17
 6d0:	80 5d       	subi	r24, 0xD0	; 208
 6d2:	37 dd       	rcall	.-1426   	; 0x142 <LCD_WriteData>
 6d4:	8a e1       	ldi	r24, 0x1A	; 26
 6d6:	1e dd       	rcall	.-1476   	; 0x114 <LCD_Cursor>
 6d8:	97 01       	movw	r18, r14
 6da:	ad ec       	ldi	r26, 0xCD	; 205
 6dc:	bc ec       	ldi	r27, 0xCC	; 204
 6de:	de d1       	rcall	.+956    	; 0xa9c <__umulhisi3>
 6e0:	8c 01       	movw	r16, r24
 6e2:	16 95       	lsr	r17
 6e4:	07 95       	ror	r16
 6e6:	16 95       	lsr	r17
 6e8:	07 95       	ror	r16
 6ea:	16 95       	lsr	r17
 6ec:	07 95       	ror	r16
 6ee:	80 e3       	ldi	r24, 0x30	; 48
 6f0:	80 0f       	add	r24, r16
 6f2:	27 dd       	rcall	.-1458   	; 0x142 <LCD_WriteData>
 6f4:	8b e1       	ldi	r24, 0x1B	; 27
 6f6:	0e dd       	rcall	.-1508   	; 0x114 <LCD_Cursor>
 6f8:	c8 01       	movw	r24, r16
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	00 0f       	add	r16, r16
 700:	11 1f       	adc	r17, r17
 702:	00 0f       	add	r16, r16
 704:	11 1f       	adc	r17, r17
 706:	00 0f       	add	r16, r16
 708:	11 1f       	adc	r17, r17
 70a:	08 0f       	add	r16, r24
 70c:	19 1f       	adc	r17, r25
 70e:	c7 01       	movw	r24, r14
 710:	80 1b       	sub	r24, r16
 712:	91 0b       	sbc	r25, r17
 714:	80 5d       	subi	r24, 0xD0	; 208
 716:	15 dd       	rcall	.-1494   	; 0x142 <LCD_WriteData>
 718:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <lol>
 71c:	8f 5f       	subi	r24, 0xFF	; 255
 71e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <lol>
 722:	86 e0       	ldi	r24, 0x06	; 6
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	1a c0       	rjmp	.+52     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	17 c0       	rjmp	.+46     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 72e:	85 e0       	ldi	r24, 0x05	; 5
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	14 c0       	rjmp	.+40     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 734:	85 e0       	ldi	r24, 0x05	; 5
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	11 c0       	rjmp	.+34     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 73a:	86 e0       	ldi	r24, 0x06	; 6
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e c0       	rjmp	.+28     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 740:	82 e0       	ldi	r24, 0x02	; 2
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0b c0       	rjmp	.+22     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	08 c0       	rjmp	.+16     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 74c:	84 e0       	ldi	r24, 0x04	; 4
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	05 c0       	rjmp	.+10     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 752:	84 e0       	ldi	r24, 0x04	; 4
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 758:	84 e0       	ldi	r24, 0x04	; 4
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	a0 96       	adiw	r28, 0x20	; 32
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	de bf       	out	0x3e, r29	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	cd bf       	out	0x3d, r28	; 61
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	ff 90       	pop	r15
 772:	ef 90       	pop	r14
 774:	df 90       	pop	r13
 776:	cf 90       	pop	r12
 778:	bf 90       	pop	r11
 77a:	af 90       	pop	r10
 77c:	9f 90       	pop	r9
 77e:	08 95       	ret

00000780 <staff>:
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	68 97       	sbiw	r28, 0x18	; 24
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	88 e0       	ldi	r24, 0x08	; 8
 796:	ef e6       	ldi	r30, 0x6F	; 111
 798:	f1 e0       	ldi	r31, 0x01	; 1
 79a:	de 01       	movw	r26, r28
 79c:	11 96       	adiw	r26, 0x01	; 1
 79e:	01 90       	ld	r0, Z+
 7a0:	0d 92       	st	X+, r0
 7a2:	8a 95       	dec	r24
 7a4:	e1 f7       	brne	.-8      	; 0x79e <staff+0x1e>
 7a6:	88 e0       	ldi	r24, 0x08	; 8
 7a8:	e7 e7       	ldi	r30, 0x77	; 119
 7aa:	f1 e0       	ldi	r31, 0x01	; 1
 7ac:	de 01       	movw	r26, r28
 7ae:	19 96       	adiw	r26, 0x09	; 9
 7b0:	01 90       	ld	r0, Z+
 7b2:	0d 92       	st	X+, r0
 7b4:	8a 95       	dec	r24
 7b6:	e1 f7       	brne	.-8      	; 0x7b0 <staff+0x30>
 7b8:	88 e0       	ldi	r24, 0x08	; 8
 7ba:	ef e7       	ldi	r30, 0x7F	; 127
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	de 01       	movw	r26, r28
 7c0:	51 96       	adiw	r26, 0x11	; 17
 7c2:	01 90       	ld	r0, Z+
 7c4:	0d 92       	st	X+, r0
 7c6:	8a 95       	dec	r24
 7c8:	e1 f7       	brne	.-8      	; 0x7c2 <staff+0x42>
 7ca:	be 01       	movw	r22, r28
 7cc:	6f 5f       	subi	r22, 0xFF	; 255
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	f3 dc       	rcall	.-1562   	; 0x1ba <LCD_Custom_Char>
 7d4:	be 01       	movw	r22, r28
 7d6:	67 5f       	subi	r22, 0xF7	; 247
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	ee dc       	rcall	.-1572   	; 0x1ba <LCD_Custom_Char>
 7de:	be 01       	movw	r22, r28
 7e0:	6f 5e       	subi	r22, 0xEF	; 239
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	e9 dc       	rcall	.-1582   	; 0x1ba <LCD_Custom_Char>
 7e8:	68 96       	adiw	r28, 0x18	; 24
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	f8 94       	cli
 7ee:	de bf       	out	0x3e, r29	; 62
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	cd bf       	out	0x3d, r28	; 61
 7f4:	df 91       	pop	r29
 7f6:	cf 91       	pop	r28
 7f8:	08 95       	ret

000007fa <displaychar>:
 7fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7fe:	8a dc       	rcall	.-1772   	; 0x114 <LCD_Cursor>
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	ce dc       	rcall	.-1636   	; 0x1a0 <LCD_Char>
 804:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <i+0x1>
 808:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <i>
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	fc 01       	movw	r30, r24
 812:	ec 5f       	subi	r30, 0xFC	; 252
 814:	fe 4f       	sbci	r31, 0xFE	; 254
 816:	80 81       	ld	r24, Z
 818:	7d dc       	rcall	.-1798   	; 0x114 <LCD_Cursor>
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	c1 dc       	rcall	.-1662   	; 0x1a0 <LCD_Char>
 81e:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <i>
 822:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <i+0x1>
 826:	ef 5f       	subi	r30, 0xFF	; 255
 828:	fe 4f       	sbci	r31, 0xFE	; 254
 82a:	80 81       	ld	r24, Z
 82c:	73 dc       	rcall	.-1818   	; 0x114 <LCD_Cursor>
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	b7 dc       	rcall	.-1682   	; 0x1a0 <LCD_Char>
 832:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <i>
 836:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <i+0x1>
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <i+0x1>
 840:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <i>
 844:	83 30       	cpi	r24, 0x03	; 3
 846:	91 05       	cpc	r25, r1
 848:	18 f3       	brcs	.-58     	; 0x810 <displaychar+0x16>
 84a:	08 95       	ret

0000084c <movething>:
}

void movething(){
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	e4 e0       	ldi	r30, 0x04	; 4
 852:	f1 e0       	ldi	r31, 0x01	; 1
 854:	a1 e0       	ldi	r26, 0x01	; 1
 856:	b1 e0       	ldi	r27, 0x01	; 1
 858:	27 e0       	ldi	r18, 0x07	; 7
 85a:	31 e0       	ldi	r19, 0x01	; 1
		if (foodway[i] == 1){
			foodway[i] = 16;
		}else if(foodway[i] == 0){
			foodway[i] = 16;
		}else if(foodway[i] == 17){
			foodway[i] = 31;
 85c:	6f e1       	ldi	r22, 0x1F	; 31
void movething(){
	for(i = 0;i<3;i++){
		if (foodway[i] == 1){
			foodway[i] = 16;
		}else if(foodway[i] == 0){
			foodway[i] = 16;
 85e:	90 e1       	ldi	r25, 0x10	; 16
			foodway[i]--;
		}
		if(fxxdway[i] == 0){
			fxxdway[i] = 15;
		}else if(fxxdway[i] == 17){
			fxxdway[i] = 32;
 860:	50 e2       	ldi	r21, 0x20	; 32
			foodway[i] = 31;
		}else{
			foodway[i]--;
		}
		if(fxxdway[i] == 0){
			fxxdway[i] = 15;
 862:	4f e0       	ldi	r20, 0x0F	; 15
	LCD_ClearScreen();
}

void movething(){
	for(i = 0;i<3;i++){
		if (foodway[i] == 1){
 864:	80 81       	ld	r24, Z
 866:	81 30       	cpi	r24, 0x01	; 1
 868:	11 f4       	brne	.+4      	; 0x86e <movething+0x22>
			foodway[i] = 16;
 86a:	90 83       	st	Z, r25
 86c:	0a c0       	rjmp	.+20     	; 0x882 <movething+0x36>
		}else if(foodway[i] == 0){
 86e:	81 11       	cpse	r24, r1
 870:	02 c0       	rjmp	.+4      	; 0x876 <movething+0x2a>
			foodway[i] = 16;
 872:	90 83       	st	Z, r25
 874:	06 c0       	rjmp	.+12     	; 0x882 <movething+0x36>
		}else if(foodway[i] == 17){
 876:	81 31       	cpi	r24, 0x11	; 17
 878:	11 f4       	brne	.+4      	; 0x87e <movething+0x32>
			foodway[i] = 31;
 87a:	60 83       	st	Z, r22
 87c:	02 c0       	rjmp	.+4      	; 0x882 <movething+0x36>
		}else{
			foodway[i]--;
 87e:	81 50       	subi	r24, 0x01	; 1
 880:	80 83       	st	Z, r24
 882:	ed 01       	movw	r28, r26
		}
		if(fxxdway[i] == 0){
 884:	8c 91       	ld	r24, X
 886:	81 11       	cpse	r24, r1
 888:	02 c0       	rjmp	.+4      	; 0x88e <movething+0x42>
			fxxdway[i] = 15;
 88a:	4c 93       	st	X, r20
 88c:	06 c0       	rjmp	.+12     	; 0x89a <movething+0x4e>
		}else if(fxxdway[i] == 17){
 88e:	81 31       	cpi	r24, 0x11	; 17
 890:	11 f4       	brne	.+4      	; 0x896 <movething+0x4a>
			fxxdway[i] = 32;
 892:	58 83       	st	Y, r21
 894:	02 c0       	rjmp	.+4      	; 0x89a <movething+0x4e>
		}else{
			fxxdway[i]--;
 896:	81 50       	subi	r24, 0x01	; 1
 898:	88 83       	st	Y, r24
 89a:	31 96       	adiw	r30, 0x01	; 1
 89c:	11 96       	adiw	r26, 0x01	; 1
void initialdisplay(){
	LCD_ClearScreen();
}

void movething(){
	for(i = 0;i<3;i++){
 89e:	e2 17       	cp	r30, r18
 8a0:	f3 07       	cpc	r31, r19
 8a2:	01 f7       	brne	.-64     	; 0x864 <movething+0x18>
 8a4:	83 e0       	ldi	r24, 0x03	; 3
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <i+0x1>
 8ac:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <i>
			fxxdway[i] = 32;
		}else{
			fxxdway[i]--;
		}
	}
}
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	08 95       	ret

000008b6 <Left>:
	}
	return state;
}

int Left(int state){
	switch(state){
 8b6:	81 30       	cpi	r24, 0x01	; 1
 8b8:	91 05       	cpc	r25, r1
 8ba:	31 f0       	breq	.+12     	; 0x8c8 <Left+0x12>
 8bc:	82 30       	cpi	r24, 0x02	; 2
 8be:	91 05       	cpc	r25, r1
 8c0:	49 f0       	breq	.+18     	; 0x8d4 <Left+0x1e>
 8c2:	89 2b       	or	r24, r25
 8c4:	d9 f4       	brne	.+54     	; 0x8fc <Left+0x46>
 8c6:	17 c0       	rjmp	.+46     	; 0x8f6 <Left+0x40>
			state = L_Wait;
			break;
		}
		
		case L_Wait:{
			if(task1.state == up || task1.state == down || task1.state == Begin ){
 8c8:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <task1>
 8cc:	21 50       	subi	r18, 0x01	; 1
 8ce:	23 30       	cpi	r18, 0x03	; 3
 8d0:	60 f0       	brcs	.+24     	; 0x8ea <Left+0x34>
 8d2:	08 95       	ret
				break;
			}
		}
		
		default:
			state = L_start;
 8d4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <task1>
 8d8:	84 50       	subi	r24, 0x04	; 4
 8da:	31 e0       	ldi	r19, 0x01	; 1
 8dc:	20 e0       	ldi	r18, 0x00	; 0
 8de:	83 30       	cpi	r24, 0x03	; 3
 8e0:	08 f0       	brcs	.+2      	; 0x8e4 <Left+0x2e>
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	83 2f       	mov	r24, r19
 8e6:	92 2f       	mov	r25, r18
 8e8:	08 95       	ret
		LCD_Char(fxxd);	
	}
}

void initialdisplay(){
	LCD_ClearScreen();
 8ea:	11 dc       	rcall	.-2014   	; 0x10e <LCD_ClearScreen>
			break;
		}
		
		case moving:{
			initialdisplay();
			displaychar();
 8ec:	86 df       	rcall	.-244    	; 0x7fa <displaychar>
			movething();
 8ee:	ae df       	rcall	.-164    	; 0x84c <movething>
 8f0:	82 e0       	ldi	r24, 0x02	; 2
			break;
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	08 95       	ret
 8f6:	81 e0       	ldi	r24, 0x01	; 1
}

int Left(int state){
	switch(state){
		case L_start:{
			state = L_Wait;
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	08 95       	ret
 8fc:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
		
		default:
			state = L_start;
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	08 95       	ret

00000902 <main>:
		
		default:
		break;
	}
	return state;
}
 902:	11 b8       	out	0x01, r1	; 1

int main(void)
{
    /* Replace with your application code */
	DDRA = 0x00;
	DDRB = 0xFF;
 904:	8f ef       	ldi	r24, 0xFF	; 255
 906:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 908:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;
 90a:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0xFF;
 90c:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x00;
 90e:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 910:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
 912:	1b b8       	out	0x0b, r1	; 11
	
	LCD_init();
 914:	07 dc       	rcall	.-2034   	; 0x124 <LCD_init>
	HC595Init();
 916:	db dc       	rcall	.-1610   	; 0x2ce <HC595Init>
	staff();
 918:	33 df       	rcall	.-410    	; 0x780 <staff>
 91a:	e8 e9       	ldi	r30, 0x98	; 152
	//eeprom_write_byte((uint8_t*)1,0);
	
	
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state =  K_start;//Task initial state
 91c:	f1 e0       	ldi	r31, 0x01	; 1
 91e:	10 82       	st	Z, r1
 920:	85 e0       	ldi	r24, 0x05	; 5
	task1.period = 5;//Task Period
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	a0 e0       	ldi	r26, 0x00	; 0
 926:	b0 e0       	ldi	r27, 0x00	; 0
 928:	81 83       	std	Z+1, r24	; 0x01
 92a:	92 83       	std	Z+2, r25	; 0x02
 92c:	a3 83       	std	Z+3, r26	; 0x03
 92e:	b4 83       	std	Z+4, r27	; 0x04
 930:	85 83       	std	Z+5, r24	; 0x05
	task1.elapsedTime = task1.period;//Task current elapsed time.
 932:	96 83       	std	Z+6, r25	; 0x06
 934:	a7 83       	std	Z+7, r26	; 0x07
 936:	b0 87       	std	Z+8, r27	; 0x08
 938:	88 e8       	ldi	r24, 0x88	; 136
	task1.TickFct = &Game;//Function pointer for the tick
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	92 87       	std	Z+10, r25	; 0x0a
 93e:	81 87       	std	Z+9, r24	; 0x09
 940:	ed e8       	ldi	r30, 0x8D	; 141
	
	task2.state =  L_start;//Task initial state
 942:	f1 e0       	ldi	r31, 0x01	; 1
 944:	10 82       	st	Z, r1
 946:	8e e1       	ldi	r24, 0x1E	; 30
	task2.period = 30;//Task Period
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	a0 e0       	ldi	r26, 0x00	; 0
 94c:	b0 e0       	ldi	r27, 0x00	; 0
 94e:	81 83       	std	Z+1, r24	; 0x01
 950:	92 83       	std	Z+2, r25	; 0x02
 952:	a3 83       	std	Z+3, r26	; 0x03
 954:	b4 83       	std	Z+4, r27	; 0x04
 956:	85 83       	std	Z+5, r24	; 0x05
	task2.elapsedTime = task2.period;//Task current elapsed time.
 958:	96 83       	std	Z+6, r25	; 0x06
 95a:	a7 83       	std	Z+7, r26	; 0x07
 95c:	b0 87       	std	Z+8, r27	; 0x08
 95e:	8b e5       	ldi	r24, 0x5B	; 91
	task2.TickFct = &Left;//Function pointer for the tick
 960:	94 e0       	ldi	r25, 0x04	; 4
 962:	92 87       	std	Z+10, r25	; 0x0a
 964:	81 87       	std	Z+9, r24	; 0x09
 966:	e7 e0       	ldi	r30, 0x07	; 7
	
	
	 unsigned long int GCD = tasks[0]->period;
 968:	f1 e0       	ldi	r31, 0x01	; 1
 96a:	a0 81       	ld	r26, Z
 96c:	b1 81       	ldd	r27, Z+1	; 0x01
 96e:	11 96       	adiw	r26, 0x01	; 1
 970:	8d 90       	ld	r8, X+
 972:	9d 90       	ld	r9, X+
 974:	ad 90       	ld	r10, X+
 976:	bc 90       	ld	r11, X
 978:	14 97       	sbiw	r26, 0x04	; 4
 97a:	02 80       	ldd	r0, Z+2	; 0x02
	 unsigned short i;//Scheduler for-loop iterator
	 for( i = 1; i < numTasks;i ++){
		 GCD = findGCD(tasks[i]-> period, GCD);
 97c:	f3 81       	ldd	r31, Z+3	; 0x03
 97e:	e0 2d       	mov	r30, r0
 980:	51 81       	ldd	r21, Z+1	; 0x01
 982:	42 81       	ldd	r20, Z+2	; 0x02
 984:	33 81       	ldd	r19, Z+3	; 0x03
 986:	24 81       	ldd	r18, Z+4	; 0x04
 988:	02 c0       	rjmp	.+4      	; 0x98e <main+0x8c>
 98a:	4b 01       	movw	r8, r22
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 98c:	5c 01       	movw	r10, r24
 98e:	65 2f       	mov	r22, r21
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 990:	74 2f       	mov	r23, r20
 992:	83 2f       	mov	r24, r19
 994:	92 2f       	mov	r25, r18
 996:	a5 01       	movw	r20, r10
 998:	94 01       	movw	r18, r8
 99a:	55 d0       	rcall	.+170    	; 0xa46 <__udivmodsi4>
 99c:	58 2d       	mov	r21, r8
 99e:	49 2d       	mov	r20, r9
 9a0:	3a 2d       	mov	r19, r10
 9a2:	2b 2d       	mov	r18, r11
 9a4:	61 15       	cp	r22, r1
		if( c == 0 ) { return b; }
 9a6:	71 05       	cpc	r23, r1
 9a8:	81 05       	cpc	r24, r1
 9aa:	91 05       	cpc	r25, r1
 9ac:	71 f7       	brne	.-36     	; 0x98a <main+0x88>
	 }
	 
	 //staff();
	 //displaychar();
	// HC595Write(0b10000001);
	 TimerSet(GCD);
 9ae:	c5 01       	movw	r24, r10
 9b0:	b4 01       	movw	r22, r8
 9b2:	1c dc       	rcall	.-1992   	; 0x1ec <TimerSet>
 9b4:	2c dc       	rcall	.-1960   	; 0x20e <TimerOn>
	 TimerOn();
 9b6:	0f 2e       	mov	r0, r31
 9b8:	fb e0       	ldi	r31, 0x0B	; 11
 9ba:	cf 2e       	mov	r12, r31
 9bc:	f1 e0       	ldi	r31, 0x01	; 1
 9be:	df 2e       	mov	r13, r31
 9c0:	f0 2d       	mov	r31, r0
 9c2:	c7 e0       	ldi	r28, 0x07	; 7
 9c4:	d1 e0       	ldi	r29, 0x01	; 1
 9c6:	7e 01       	movw	r14, r28
 9c8:	08 81       	ld	r16, Y
 9ca:	19 81       	ldd	r17, Y+1	; 0x01
	
    while (1) 
    {
		
		  for(i = 0; i < numTasks; i++){//Scheduler code
			  if(tasks[i]->elapsedTime == tasks[i]->period){//Task is ready to tick
 9cc:	d8 01       	movw	r26, r16
 9ce:	15 96       	adiw	r26, 0x05	; 5
 9d0:	4d 91       	ld	r20, X+
 9d2:	5d 91       	ld	r21, X+
 9d4:	6d 91       	ld	r22, X+
 9d6:	7c 91       	ld	r23, X
 9d8:	18 97       	sbiw	r26, 0x08	; 8
 9da:	11 96       	adiw	r26, 0x01	; 1
 9dc:	8d 91       	ld	r24, X+
 9de:	9d 91       	ld	r25, X+
 9e0:	0d 90       	ld	r0, X+
 9e2:	bc 91       	ld	r27, X
 9e4:	a0 2d       	mov	r26, r0
 9e6:	48 17       	cp	r20, r24
 9e8:	59 07       	cpc	r21, r25
 9ea:	6a 07       	cpc	r22, r26
 9ec:	7b 07       	cpc	r23, r27
 9ee:	89 f4       	brne	.+34     	; 0xa12 <main+0x110>
 9f0:	f8 01       	movw	r30, r16
 9f2:	80 81       	ld	r24, Z
				  tasks[i]->state= tasks[i]->TickFct(tasks[i]->state);//set next state
 9f4:	01 84       	ldd	r0, Z+9	; 0x09
 9f6:	f2 85       	ldd	r31, Z+10	; 0x0a
 9f8:	e0 2d       	mov	r30, r0
 9fa:	08 2e       	mov	r0, r24
 9fc:	00 0c       	add	r0, r0
 9fe:	99 0b       	sbc	r25, r25
 a00:	09 95       	icall
 a02:	d8 01       	movw	r26, r16
 a04:	8c 93       	st	X, r24
 a06:	e8 81       	ld	r30, Y
 a08:	f9 81       	ldd	r31, Y+1	; 0x01
				  tasks[i]->elapsedTime = 0;//Reset the elapsed time for next tick;
 a0a:	15 82       	std	Z+5, r1	; 0x05
 a0c:	16 82       	std	Z+6, r1	; 0x06
 a0e:	17 82       	std	Z+7, r1	; 0x07
 a10:	10 86       	std	Z+8, r1	; 0x08
 a12:	d7 01       	movw	r26, r14
 a14:	ed 91       	ld	r30, X+
			  }
			  tasks[i]->elapsedTime += GCD;
 a16:	fc 91       	ld	r31, X
 a18:	22 96       	adiw	r28, 0x02	; 2
 a1a:	85 81       	ldd	r24, Z+5	; 0x05
 a1c:	96 81       	ldd	r25, Z+6	; 0x06
 a1e:	a7 81       	ldd	r26, Z+7	; 0x07
 a20:	b0 85       	ldd	r27, Z+8	; 0x08
 a22:	88 0d       	add	r24, r8
 a24:	99 1d       	adc	r25, r9
 a26:	aa 1d       	adc	r26, r10
 a28:	bb 1d       	adc	r27, r11
 a2a:	85 83       	std	Z+5, r24	; 0x05
 a2c:	96 83       	std	Z+6, r25	; 0x06
 a2e:	a7 83       	std	Z+7, r26	; 0x07
 a30:	b0 87       	std	Z+8, r27	; 0x08
 a32:	cc 16       	cp	r12, r28
 a34:	dd 06       	cpc	r13, r29
	 
	
    while (1) 
    {
		
		  for(i = 0; i < numTasks; i++){//Scheduler code
 a36:	39 f6       	brne	.-114    	; 0x9c6 <main+0xc4>
 a38:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <TimerFlag>
				  tasks[i]->state= tasks[i]->TickFct(tasks[i]->state);//set next state
				  tasks[i]->elapsedTime = 0;//Reset the elapsed time for next tick;
			  }
			  tasks[i]->elapsedTime += GCD;
		  }
		  while(!TimerFlag);
 a3c:	88 23       	and	r24, r24
 a3e:	e1 f3       	breq	.-8      	; 0xa38 <main+0x136>
 a40:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <TimerFlag>
		  TimerFlag = 0;
 a44:	be cf       	rjmp	.-132    	; 0x9c2 <main+0xc0>

00000a46 <__udivmodsi4>:
 a46:	a1 e2       	ldi	r26, 0x21	; 33
		  
		
		
    }
 a48:	1a 2e       	mov	r1, r26
 a4a:	aa 1b       	sub	r26, r26
 a4c:	bb 1b       	sub	r27, r27
 a4e:	fd 01       	movw	r30, r26
 a50:	0d c0       	rjmp	.+26     	; 0xa6c <__udivmodsi4_ep>

00000a52 <__udivmodsi4_loop>:
 a52:	aa 1f       	adc	r26, r26
 a54:	bb 1f       	adc	r27, r27
 a56:	ee 1f       	adc	r30, r30
 a58:	ff 1f       	adc	r31, r31
 a5a:	a2 17       	cp	r26, r18
 a5c:	b3 07       	cpc	r27, r19
 a5e:	e4 07       	cpc	r30, r20
 a60:	f5 07       	cpc	r31, r21
 a62:	20 f0       	brcs	.+8      	; 0xa6c <__udivmodsi4_ep>
 a64:	a2 1b       	sub	r26, r18
 a66:	b3 0b       	sbc	r27, r19
 a68:	e4 0b       	sbc	r30, r20
 a6a:	f5 0b       	sbc	r31, r21

00000a6c <__udivmodsi4_ep>:
 a6c:	66 1f       	adc	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	1a 94       	dec	r1
 a76:	69 f7       	brne	.-38     	; 0xa52 <__udivmodsi4_loop>
 a78:	60 95       	com	r22
 a7a:	70 95       	com	r23
 a7c:	80 95       	com	r24
 a7e:	90 95       	com	r25
 a80:	9b 01       	movw	r18, r22
 a82:	ac 01       	movw	r20, r24
 a84:	bd 01       	movw	r22, r26
 a86:	cf 01       	movw	r24, r30
 a88:	08 95       	ret

00000a8a <__tablejump2__>:
 a8a:	ee 0f       	add	r30, r30
 a8c:	ff 1f       	adc	r31, r31
 a8e:	00 24       	eor	r0, r0
 a90:	00 1c       	adc	r0, r0
 a92:	0b be       	out	0x3b, r0	; 59
 a94:	07 90       	elpm	r0, Z+
 a96:	f6 91       	elpm	r31, Z
 a98:	e0 2d       	mov	r30, r0
 a9a:	09 94       	ijmp

00000a9c <__umulhisi3>:
 a9c:	a2 9f       	mul	r26, r18
 a9e:	b0 01       	movw	r22, r0
 aa0:	b3 9f       	mul	r27, r19
 aa2:	c0 01       	movw	r24, r0
 aa4:	a3 9f       	mul	r26, r19
 aa6:	70 0d       	add	r23, r0
 aa8:	81 1d       	adc	r24, r1
 aaa:	11 24       	eor	r1, r1
 aac:	91 1d       	adc	r25, r1
 aae:	b2 9f       	mul	r27, r18
 ab0:	70 0d       	add	r23, r0
 ab2:	81 1d       	adc	r24, r1
 ab4:	11 24       	eor	r1, r1
 ab6:	91 1d       	adc	r25, r1
 ab8:	08 95       	ret

00000aba <eeprom_read_byte>:
 aba:	f9 99       	sbic	0x1f, 1	; 31
 abc:	fe cf       	rjmp	.-4      	; 0xaba <eeprom_read_byte>
 abe:	92 bd       	out	0x22, r25	; 34
 ac0:	81 bd       	out	0x21, r24	; 33
 ac2:	f8 9a       	sbi	0x1f, 0	; 31
 ac4:	99 27       	eor	r25, r25
 ac6:	80 b5       	in	r24, 0x20	; 32
 ac8:	08 95       	ret

00000aca <eeprom_write_byte>:
 aca:	26 2f       	mov	r18, r22

00000acc <eeprom_write_r18>:
 acc:	f9 99       	sbic	0x1f, 1	; 31
 ace:	fe cf       	rjmp	.-4      	; 0xacc <eeprom_write_r18>
 ad0:	1f ba       	out	0x1f, r1	; 31
 ad2:	92 bd       	out	0x22, r25	; 34
 ad4:	81 bd       	out	0x21, r24	; 33
 ad6:	20 bd       	out	0x20, r18	; 32
 ad8:	0f b6       	in	r0, 0x3f	; 63
 ada:	f8 94       	cli
 adc:	fa 9a       	sbi	0x1f, 2	; 31
 ade:	f9 9a       	sbi	0x1f, 1	; 31
 ae0:	0f be       	out	0x3f, r0	; 63
 ae2:	01 96       	adiw	r24, 0x01	; 1
 ae4:	08 95       	ret

00000ae6 <_exit>:
 ae6:	f8 94       	cli

00000ae8 <__stop_program>:
 ae8:	ff cf       	rjmp	.-2      	; 0xae8 <__stop_program>
